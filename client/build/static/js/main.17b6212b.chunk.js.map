{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","category","key","spinner","CategoryMenu","setCategory","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","toggleCart","sum","toFixed","calculateTotal","Auth","loggedIn","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.17b6212b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n//added 22.3.3 for cart persistence \nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) { //use a switch statement to check what the value of the method is\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n   });\n}","import {\n    UPDATE_PRODUCTS, \n    UPDATE_CATEGORIES, \n    UPDATE_CURRENT_CATEGORY\n} from \"./actions\"; \n\n// new shopping cart actions imported from 22.2 -- merge at will \nimport {\n    \n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from './actions';\nimport {useReducer} from 'react';\n\nexport const reducer = (state, action)=>{\n    switch(action.type){\n            // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS: \n            return{\n                ...state,\n                products: [...action.products],\n            };\n\n        case UPDATE_CATEGORIES:\n            return{\n                ...state,\n                categories: [...action.categories],\n            }\n\n        case UPDATE_CURRENT_CATEGORY:\n            return{\n                ...state,\n                currentCategory: action.currentCategory\n            }\n        //case added from 22.2.3\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            }\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n        case REMOVE_FROM_CART:\n        let newState = state.cart.filter(product => {\n            return product._id !== action._id;\n        });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                if (action._id === product._id) {\n                    product.purchaseQuantity = action.purchaseQuantity;\n                }\n                return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n    // if it's none of these actions, do not update state at all and keep things the same!\n         default:\n            return state;\n        \n        \n    }\n}\n\nexport function useProductReducer(initialState){\n    return useReducer(reducer, initialState);\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n// added from 22.2.3\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, {createContext, useContext} from \"react\";\nimport {useProductReducer} from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n        products: [],\n        cart: [],\n        cartOpen: false,\n        categories: [],\n        currentCategory: ''\n      });\n    // use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n  };\n\n  const useStoreContext = () => {\n    return useContext(StoreContext);\n  };\n\n\n  export { StoreProvider, useStoreContext };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\n// import from 22.2.6 for addCart functionality \nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  /* previous addToCart function before implementing update/delete items functionality\nconst addToCart = () => {\n  dispatch({\n    type: ADD_TO_CART,\n    product: { ...item, purchaseQuantity: 1 }\n  });\n};\n*/ \n\n//22.2.7 updated addToCart functionality to stack duplicate items in the cart\nconst { cart } = state;\n\nconst addToCart = () => {\n  // find the cart item with the matching id\n  const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n  // if there was a match, call UPDATE with a new purchase quantity\n  if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: _id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n  } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...item, purchaseQuantity: 1 }\n    });\n  }\n};\n\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, {useEffect} from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\n//imported for refactor 22.1.6\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\n//22.3 indexDB persistence \nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  /* useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n    }\n  }, [data, dispatch]);\n  */ \n//updated useEffect hook for 22.3 indexedDB persistence\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n  }, [data, loading, dispatch]);\n  \n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n  \n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport {useStoreContext} from '../../utils/GlobalState';\n// import from refactor \nimport { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\n  //22.3.4\n  import { idbPromise } from '../../utils/helpers';\n\n  \nfunction CategoryMenu({ setCategory }) {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  //loading adding to destructure 22.3.4 for iDB persistence functionality \n  const { loading,  data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n\n\n  \n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n\n      // added from 22.3.4 for implementing idbPromise function \n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n\n//added from 22.2.7 to provide update/remove functionality \nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\n\nconst CartItem = ({ item }) => {\n\n\nconst [, dispatch] = useStoreContext();\n\nconst removeFromCart = item => {\n  dispatch({\n    type: REMOVE_FROM_CART,\n    _id: item._id\n  });\n};\n//22.2.7 add allows for direct edit of cart quantity --without onChange the input is readOnly implicitly\nconst onChange = (e) => {\n    const value = e.target.value;\n  \n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n    }\n  };\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange} \n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n           >\n            🗑️\n           </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\n// import for toggle action \nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART } from '../../utils/actions';\n\n\nconst Cart = () => {\nconst [state, dispatch] = useStoreContext();\n\nfunction toggleCart() {\n  dispatch({ type: TOGGLE_CART });\n}\n//update cart balance to state.cart 22.2.6 \nfunction calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\nif (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  console.log(state)\n  return (\n    <div className=\"cart\">\n  <div className=\"close\" onClick={toggleCart}>[close]</div>\n  <h2>Shopping Cart</h2>\n  {state.cart.length ? (\n    <div>\n      {state.cart.map(item => (\n        <CartItem key={item._id} item={item} />\n      ))}\n      <div className=\"flex-row space-between\">\n        <strong>Total: ${calculateTotal()}</strong>\n        {\n          Auth.loggedIn() ?\n            <button>\n              Checkout\n            </button>\n            :\n            <span>(log in to check out)</span>\n        }\n      </div>\n    </div>\n  ) : (\n    <h3>\n      <span role=\"img\" aria-label=\"shocked\">\n        😱\n      </span>\n      You haven't added anything to your cart yet!\n    </h3>\n  )}\n</div>\n  );\n};\n\nexport default Cart;","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\n\n// import from 22.2.4\nimport Cart from '../components/Cart';\n\n\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n  <CategoryMenu />\n  <ProductList />\n  <Cart />\n  </div>\n  );\n};\n/*  code we removed after refactoring --useState removed from dependency\nconst Home = () => {\n  const [currentCategory, setCategory] = useState(\"\");\n\n  return (\n    <div className=\"container\">\n      <CategoryMenu setCategory={setCategory} />\n      <ProductList currentCategory={currentCategory} />\n    </div>\n  );\n};\n*/ \n\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\n//imported for refactor to support global state object 22.1.6\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../utils/actions\";\n\n\n\nimport Cart from '../components/Cart';\n\n//additional imports for 22.6 functionality -- merge at will\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n} from '../utils/actions';\n\n\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\nconst { id } = useParams();\n\nconst [currentProduct, setCurrentProduct] = useState({})\n\nconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\n//cart variable was added to destructuring \nconst { products, cart } = state;\n\n\nuseEffect(() => {\n  if (products.length) {\n    setCurrentProduct(products.find(product => product._id === id));\n  } else if (data) {\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products\n    });\n  }\n}, [products, data, dispatch, id]);\n\n/* 22.2.6 add-to-cart functionality addtoCart()\nconst addToCart = () => {\n  dispatch({\n    type: ADD_TO_CART,\n    product: { ...currentProduct, purchaseQuantity: 1 }\n  });\n};\n\n*/\n\n//22.2.7 add-to-cart functionality \nconst addToCart = () => {\n  const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n  if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n  } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...currentProduct, purchaseQuantity: 1 }\n    });\n  }\n};\n\n//22.2.7\nconst removeFromCart = () => {\n  dispatch({\n    type: REMOVE_FROM_CART,\n    _id: currentProduct._id\n  });\n};\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button \n  disabled={!cart.find(p => p._id === currentProduct._id)} \n  onClick={removeFromCart}\n>\n  Remove from Cart\n</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    <Cart/>\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\n// StoreProvider import added \nimport {StoreProvider} from \"./utils/GlobalState\";\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav/>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n          \n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}